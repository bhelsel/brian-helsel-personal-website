{
  "hash": "336711ba30cd6f3f3df2071106f930e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: agcounts R package\nauthor: Brian Helsel\ndate: '2022-06-14'\nslug: agcounts-r-package\ncategories: [R Packages]\n---\n\n\n\n<img src=\"thumbnail.png\" width=\"15%\" style=\"float:right\">\n\n# Introduction\n\nNeishabouri et al. released a preprint of <a href = https://www.researchsquare.com/article/rs-1370418/v1>\"Quantification of Acceleration as Activity Counts in ActiGraph Wearables\"</a> on February 24, 2022 and the <a href = https://github.com/actigraph/agcounts>Python code on Github</a>. Like many others, I thought this package had the potential to be useful when analyzing accelerometer data. It makes known the proprietary algorithm that ActiGraph uses to generate counts, but it also allows the easy conversion of raw data to counts from any accelerometer file.\n\nI had started using Python again when I first started my postdoc at The University of Kansas Medical Center (KUMC). SaS and Stata were languages that I was taught during my PhD at Clemson University, but I lost access to the software and was looking for something that was open-source and free. I had colleagues in Bioinformatics who used Python at Clemson and I spent about a year learning some Python basics. After advancing my knowledge of Python during my postdoc at KUMC, I decided to start learning R since I knew it was common among academics. The R programming language was very intuitive after using Python and I was able to pick it up quickly. I also discovered the power of creating functions and packages. Most of the functions and packages I've created haven't been shared. However, I thought translating the agcounts package from Python to R would be a fun and useful project for me to learn more about package development and further advance my knowledge in both programming languages. \n\nDr. Kimberly Clevenger recently wrote a <a href = \"https://clevengerkimberly.github.io/2022-05-02-agcounts/\">blog post</a> comparing the initial release of the agcounts R package to counts generated by Actilife. She found that the files were similar with differences mostly due to rounding, but suggests more testing with free-living data. She also modifies the code to work with GT3X, CSV, and binary files and adds her modification to the post for users to see. The second part of Dr. Clevenger's post inspired one of the recent changes to the agcounts R package. We added the `calculate_counts` function to create a more flexible programming experience for users that may be using different file types.\n\n# Purpose\n\nThe purpose of this post is to provide an overview of the `calculate_counts` and `get_counts` functions. These are the two exported functions within the agcounts package.\n\n# Install agcounts v0.3.0\n\nBefore we get started, make sure you have the latest version of the agcounts package installed. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"bhelsel/agcounts\")\n```\n:::\n\n\n\nWe are creating package releases on GitHub, so you can always re-install the first version of the package if it works better for you.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"bhelsel/agcounts\", ref = \"v0.1.0\")\n```\n:::\n\n\n\n# Load the agcounts package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(agcounts)\n```\n:::\n\n\n\nLet's also add the path name to the example data set that comes with the agcounts package. You can access it by typing the following into your R Script.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npathname <- system.file(\"extdata/example.gt3x\", package = \"agcounts\")\n```\n:::\n\n\n\nThis only adds the path name to the value `pathname` in your Global Environment. Now we can either pass the `pathname` value to the `get_counts` function or we can read in the data set to R first and then pass the raw data to the `calculate_counts` function.\n\n# get_counts\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- get_counts(path = pathname, epoch = 60, write.file = FALSE, return.data = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPython module \"pygt3x\" is not found. Switching parser to GGIR.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nLoading chunk: 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n There is not enough data to perform the GGIR autocalibration method. Returning data as read by read.gt3x.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(data, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 time Axis1 Axis2 Axis3 Vector.Magnitude\n1 2023-06-13 08:34:00  2606  3116  3542             5389\n2 2023-06-13 08:35:00  1738  3943  2840             5161\n3 2023-06-13 08:36:00  2172  3363  2646             4799\n```\n\n\n:::\n:::\n\n\n\nYou will notice that the arguments `write.file` is set to FALSE and `return.data` is set to TRUE. These are the default values in agcounts v0.3.0. This way the program doesn't make changes to your computer without you changing the `write.file` argument to TRUE. You will also notice that the `frequency` argument is missing. We added automated frequency detection so it is one less argument that the user needs to supply to the `get_counts` function. This is done through the `.get_frequency` internal function, which can be viewed by typing `View(agcounts:::get_frequency)`. The one requirement for `.get_frequency` to autodetect the sample rate is that the data set have a `time` variable. This is not a problem with the `get_counts` function because we use `read.gt3x::read.gt3x` inside of `get_counts` and that provides the formatting needed. If you were using `calculate_counts`, then you would want to make sure that the variable names are set to `time`, `X`, `Y`, and `Z`.\n\n# calculate_counts\n\n`calculate_counts` is called within the `get_counts` function. However, if you want to use the `calculate_counts` function then you need to first import the data. We can import the sample data into R using the `read.gt3x::read.gt3x` function, but data can be imported into R as a CSV, binary, or other file as in Dr. Clevenger's <a href = \"https://clevengerkimberly.github.io/2022-05-02-agcounts/\">blog post</a>. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(read.gt3x)\nraw <- read.gt3x(path = pathname, asDataFrame = TRUE, imputeZeroes = TRUE)\nhead(raw, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSampling Rate: 100Hz\nFirmware Version: 1.7.2\nSerial Number Prefix: TAS\n                 time      X     Y     Z\n1 2023-06-13 08:34:00 -0.020 0.008 1.031\n2 2023-06-13 08:34:00  0.000 0.004 1.035\n3 2023-06-13 08:34:00  0.008 0.004 1.031\n4 2023-06-13 08:34:00  0.008 0.004 1.035\n5 2023-06-13 08:34:00  0.008 0.004 1.031\n```\n\n\n:::\n:::\n\n\n\nAs you can see, the `read.gt3x` function already returns the data in the format that we need. If the variable names are not the same, you may need to change the names first before using `calculate_counts`. This can be done within a piping workflow using the `stats::setNames` function. The columns can be in any order since `calculate_counts` refers to the columns by name, but you can use `dplyr::relocate` if you would like to change the order of the columns. Finally, we need `start_time` and `stop_time` attributes in our data frame. You can either set the attributes on a separate line of code using `attr(raw, \"start_time\") <- raw$time[1]` and `attr(raw, \"stop_time\") <- round(raw$time[nrow(raw)])`. However, if you prefer the piping workflow this can also be done using the code below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nraw %>%\n  stats::setNames(c(\"time\", \"X\", \"Y\", \"Z\")) %>%\n  relocate(c(\"time\", \"X\", \"Y\", \"Z\")) %>%\n  `attr<-`(., \"start_time\", .$time[1]) %>%\n  `attr<-`(., \"stop_time\", round(.$time[nrow(.)])) %>%\n  calculate_counts(epoch = 60)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 time Axis1 Axis2 Axis3 Vector.Magnitude\n1 2023-06-13 08:34:00  2606  3116  3542             5389\n2 2023-06-13 08:35:00  1738  3943  2840             5161\n3 2023-06-13 08:36:00  2172  3363  2646             4799\n```\n\n\n:::\n:::\n\n\n\n# Conclusion\n\nIt's a fairly simple package, but I hope that you will find it useful within your workflow. If you have any problems, feel free to comment below or add an issue on the agcounts <a href = \"https://github.com/bhelsel/agcounts/issues\">GitHub page</a>.\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}